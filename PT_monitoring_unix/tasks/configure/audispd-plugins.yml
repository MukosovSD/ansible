---
- name: Main | Configure | audispd-plugins | Getting Auditd version
  ansible.builtin.shell: out=$(/sbin/auditctl -v) && echo ${out} | /usr/bin/cut --delimiter " " --fields 3
  register: auditd_installed_ver

- name: Main | Configure | audispd-plugins | Modifying audispd-plugins config file (Auditd v2)
  when: auditd_installed_ver.stdout < '3'
  ansible.builtin.lineinfile:
    path: "{{ audispd_plugin_config_v2 }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^active', line: 'active = yes' }
    - { regexp: '^args', line: 'args = LOG_LOCAL6' }

- name: Main | Configure | audispd-plugins | Modifying audispd-plugins config file (Auditd v3)
  when: auditd_installed_ver.stdout >= '3.0'
  ansible.builtin.lineinfile:
    path: "{{ audispd_plugin_config_v3 }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^active', line: 'active = yes' }
    - { regexp: '^args', line: 'args = LOG_LOCAL6' }

- name: Main | Configure | audispd-plugins | Restarting Auditd service
  when: ansible_os_family != 'RedHat' and ansible_os_family != 'REDOS' and ansible_os_family != 'RED' and ansible_os_family != 'Altlinux'
  ansible.builtin.service:
    name: auditd
    state: restarted

- name: Main | Configure | audispd-plugins | Restarting Auditd service (RHEL-based)
  when: ansible_os_family == 'RedHat' or ansible_os_family == 'REDOS' or ansible_os_family == 'RED'
  ansible.builtin.service: name=auditd state=restarted use=service

- name: Main | Configure | audispd-plugins | Restarting Auditd service (Altlinux)
  when: ansible_os_family == 'Altlinux'
  ansible.builtin.command: 'service auditd restart'
